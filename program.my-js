use "math"
use "std"
use "functional"
word = 2 + 2
word2 = PI + word
str = "a" * 5 + "ba" * 7 + "\n"
print str * "3" * 2
print "word = " + word + "\n"
print "word2 = " + word2 + "\n"
print "1" > "abc"
print "\n"
if (1 <= 2) print "1 = 1"
else print "1 != 1"
print "\n"
if (40 < 50 || 50 > 60) {
    print "true1\n"
    print "true2\n"
    i = 0
    print "do while"
    do {
       print "i = " + i + "\n"
       i = i + 1
    } while (i < 10)
    i = 0
    print "while"
    while (i < 10) {
        print "i = " + i + sin(i) + "\n"
        i = i + 1
    }
    print "for"
    for i = 0, i < 10, i = i + 1 {
        print "i = " + i + "\n"
    }
}
else print "false"

print "sin(PI) = " + sin(PI/2)
echo(1,2,3,"4","5","text",sin(0),cos(0),sin(PI),cos(PI),PI)

a = "print"
print a

def name(a,b) {
   echo("a = ", a, " b = ", b)
}

def sum(a,b) {
   a = -60
   return a+b
}
name(1,"text")
print sum(10, 15)

print a + "\n"

arr = [1, "text", sum(10, 15), [], ["text", [90, [7 + 6, [50]]]]]
print arr + "\n"
arr[0] = arr[0] + 1000 + arr[2]
print arr + "\n"
print arr[4][1] + "\n"
arr[4][1] = "text"
print arr[4][1] + "\n"

print "\n\n"
array = newarray(2, 2, 2, 2)
print array

add = def(a,b) = a+b
sub = def(a,b) = a-b
mul = def(a,b) = a*b
div = def(a,b) = a/b
cube = def(x) = x*mul(x, x)
print "\n\n"
print mul(8, 5)
print "\n"
print cube(2)

functions = [add, sub, mul, div]
def function(f, a, b) = f(a, b)
for i = 0, i < 4, i = i + 1 {
    print "\n"
    print functions[i]
    print "\n"
    print function(functions[i], 6, 3)
}

// map
map = {"+" : add, "-" : sub, "*" : mul, "/" : div}
map["%"] = def(x,y) = x % y
map["pow"] = def(x,y) = pow(x, y)
//print map["+"]
print "\n"
print function(map["+"], 4, 5)
print "\n"
foreach(map, def(op, func) = echo (4, op, 5, "=", func(4,5)))
foreach(arr, ::echo)

arr1 = [1,2,3]
arr1 = arr1 :: 4
arr2 = [5,6,7]
print arr1
print "\n"
print arr1 << arr2

for op, func : map {
  echo (4, op, 5, "=", func(4,5))
}

for v : arr1 print "" + v + ", "
print "\n"
for (v : arr1 << arr2) print "" + v + ", "
print "\n"
for v : [1,2,3,4,5,6,7,8,9] print "" + v + ", "

use "types"
print "\n"
print typeof(1)
print "\n"
print typeof("1")
print "\n"
print typeof(arr1)
print "\n"
print typeof({})
print "\n"
print typeof(add)

print "\n"
print typeof(number("1"))
print "\n"
print typeof(string(1))


myArr = [1,2,3]

print (myArr[1] = myArr[2] = 30)

print myArr;

thread(::inthread)
def inthread() = echo("this is a thread")
thread(def (str) { println str }, "this is a thread with arguments")
